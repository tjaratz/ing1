Mensaje: representa un pedido de colaboracion, no es un metodo. En funcion del mensaje puede ejecutarse un metodo u otro o ninguno. El mensaje dice el que y no el como(esto lo hace el metodo)

Similitud entre Clousure y Metodo: ambos son una secuencia de colaboraciones
Diferencias: el Clousure no tiene nombre, el metodo si


Lenguajes prototipados vs clasificados

Teórica:

Buscar :
			- incrementar la COHESIÓN
			- reducir el ACOPLAMIENTO (dependencias)

Los mensajes definen QUE es lo que puede hacer un objeto, es la parte declarativa del modelo.

Mensajes que sabe responder un mensaje:
										- sendTo: unObjeto
										- name


Cuando un objeto recibe un mensaje lo único que puede hacer es responder con otro mensaje.

El método define el COMO.

Colaboraciones: la instanciacion del mensaje

 	- son sincronicas (el objeto enviante espera la respuesta del mensaje para mandar un proximo mensaje)
 	- son dirigidas (para que un objeto le envie un mensaje a otro lo tiene que conocer, no es broadcast) --> RELACION DE CONOCIMIENTO
 	- siempre existe respuesta (siempre se obtiene un objeto como respuesta, nil representa la nada)
 	- el receptor desconoce al emisor (los objetos se deben comportar de forma objetiva, si supiera quien es el emisor podría responder en función de
 	  quien le envía el mensaje)

RELACION DE CONOCIMIENTO: es la unica relacion que el paradigma define entre objetos.
					      ej: 1/2 conoce al 1 y al 2. A esta relacion se le pone un nombre, el 1 sería el 'numerador' y el 2 el 'denominador'.
					      
					      El nombre de un objeto se da a partir del rol que cumple el objeto segun el contexto en el que se lo esta nombrando(che boludo, papa, hijo) --> 2/3 va a llamar al 2 'numerador'

No representamos al ente per se, no llamamos a un objeto 'persona'. Lo que hacemos es modelar a la parsona en un contexto particular. El rol que el ente cumple en el contexto que estamos representando.

Mensajes importantes que debe saber responder 'unColaborador' : {value, value:, type, name}

En los lenguajes dinamicamente tipados los colaboradores no saben responder al mensaje type, en los estaticamente tipados si.

el ':=' no es un mensaje, es una palabra reservada del lenguaje.

- variable := objeto
- objeto mensaje


Que pasaría si en vez de objetos colaboraciones mensajes tuviera objetos mensajes y todo objeto sabe responder los mensajes que responde un colaborador:
value
value:
name

Seudovariables: self y thisContext. No hay que definirlas, en ningun lugar se inicializan y no se pueden modificar, siempre apuntan a algun objeto.
thisContext: 

En el desarrollo creamos las abstracciones a medida que las necesistamos, no de antemano. De esa forma nos ahorramos sobrediseñar.

4 pasos para sacar codigo repetido.

Es importante buscar el rol de los entes del dominio del problema, no de lo que ve en el dominio. LuzAmarilla no es un buen nombre ya que la luz representa una señal de precaucion, por ende deberia llamarse "señal de precaucion de corrientes", asi como las demas: señal de avance de corrientes/maipu, señal de detencion de corrientes/maipu, etc.

Romper el encapsulamiento aumenta el acoplamiento y ademas le quita la responsabilidad a los objetos.

El codigo repetido indica que falta una abstraccion.

Modelo platon:

Las clases son objetos que representan ideas/conceptos.

Segun la vision clasica/aristotelica las instancias de la clase se comportan como la clase indica, por ende toda instancia sabe a que clase pertenece/ de quien es instancia. El objeto no conoce la implementacion de los mensajes que sabe responder, de hecho le pregunta a la clase si implementa dicho mensaje y le pide que lo ejecute. 

Es discutible que las clases sepan responder el mensaje new, pues no se deberia esperar que el ente abstracto sepa responder objetos concretos.

En java, c++ etc el new no es un mensaje por lo que no puede ser redefinido, por esto tenemos los constructores que si pueden redefinirse.


Super es una pseudovariable que apunta al mismo objeto que self.

Self y super referencial al mismo objeto pero se busca la implementacion del mensaje de distinta forma.

Self la busca en el objeto mismo, super la busca en la superclase del objeto donde se usa super.

Existe porque uno de los objetivos al principio era programar por diferencia, si yo queria diferir la implementacion de un metodo un poco respecto de la de otro puedo usar super. 

Practica:

"devuelve una coleccion aplicando la operacion a los elementos"
#(1 2 3 4 5)  collect: [:element | element * 2].  

"devuelve una coleccion seleccionando los elementos segun algun criterio"
#(1 2 3 4 5)  select: [:element | element odd].

"recorre la coleccion en orden(ninguno en particular) y devuelve un elemento"
"no hay que usarlo porque le da la responsabilidad al que nos invoca de la convencion que utilizamos"
#(1 2 3 4 5)  detect: [:element | element   > 10] ifNone: [^ 'no hay nada']. 

"es como un fold" 
#(1 2 3 4 5)  inject: 0 into: [:sum :element | sum + element]

'asdfklgjhsdafljh' select: [:char | char = 'a']

CLASE SIGUIENTE:

POLIMORFISMO: relacion entre objetos y mensajes: un conjunto de objetos son polimorficos entre si respecto de un conjunto de mensajes si los objetos responden a todos los mensajes semanticamente igual. Semanticamente igual significa "QUE haga lo mismo". 

 - los colaboradores deben ser polimorficos

 - no tiene que ver exclusivamente con clases

 - no hay ninguna relacion/restriccion polimorfismo/clase. Los lenguajes dinamicamente tipados son menos acoplados respecto de los tipos que los estaticos.

 	1) el polimorfismo permite intercambiar implementacion sin que el que usa el objeto se entere. En el semaforo si quisiera tener señales sonoras
 	   como la de maipu, las soluciones que tengo son: 1- voy al regulador de transito de maipu y le agrego un nuevo colaborador "señal de detencion sonora" y empezar a apgar y prender la señal en los metodos que la usan, aunque ese cambio es una paja porque implica modificar en muchos lugares.
 	   2- creo un objeto llamado señal compuesta, que tenga la señal luminica y la sonora y luego la hacemos polimorfica con la señal comun, tal que al prender le mande a la señal luminica y sonora la señal prender, lo mismo con apagar y en los lugares que uso "señal simple" paso a usar "señal compuesta".

 	2) me simplifica el vocabulario haciendo mas simple el modelo.
 	
 	Al escribir codigo en castellano perdemos la capacidad de implementar polimorfismo pues el codigo ya viene hecho en ingles en general.


 	Un clousure es un objeto que representa un conjunto de colaboraciones, asi como los metodos. La primer diferencia es que el clousure no tiene un nombre asociado. La segunda es como se realiza el binding de las variables. El clousure se bindea en el contexto que esta siendo instanciado

 	Los clousures de smalltalk ruby y self son full clousures, esto difiere de las clousures normales en como se bindean los returns dentro de 
 	los clousures, ej: 

 	metodoEjemplo

 			aClousure := [return 10].
 			return 20 + aClousure value   

 	si ejecuto metodoEjemplo se retorna 10 porque el return de las full clousures se bindea al contexto donde ejecuta, por ende bindea el return del clousure al return del metodo.


 	Los lenguajes prototipados permiten representar facilmente objetos con comportamiento especifico sin mas que los mismos objetos. En los lenguajes de clasificacion hay que caer en el "if" o tener una jerarquia de clases que me diferencie el comportamiento. Un lenguaje de clasificacion no permite modelar entidades cuya instancia y concepto sean unicos, DIOS es un ejemplo.

 	Sacar codigo repetido:

 	 
		- copio lo que se repite
		- parametrizo lo que cambia (agregar los colaboradores externos)
		- nombrarlo (al metodo)
		- usar lo que hicimos



   Si el lenguaje tiene full closures entonces la sintaxis de control de flujo se puede implementar a travez de mensajes(guy steele, sussman => lisp + algol 60(toman el binding lexicografico) = scheme) y asi nacen los closures. En el paper Lambda the Ultimate.. demuestran que con full closures pueden implementar sintaxis de control de flujo sin sintaxis especifica. Ver videos antes.

   Soar --> Smalltalk on a risc 84 - GC Generacional
   Gilad Bracha - Self - StringTalk - Java HotSpot 1.2 - JavaScript v8 engine
   Lisp Machines.


   Las funciones anonimas de java son sintactic sugar, no son realmente closures, por ejemplo no permite modificar variables del contexto.

   Go no tiene manejo de excepciones ni manejo de generics("templates")

   Lenguaje sin closures implica codigo repetido => no vale la pena

   Es mejor usar polimorfismo porque de esa forma la decision la toman los objetos, en cambio si uso if's yo estoy harcodeando la logica y esto es propenso a errores.

   Como reemplazar ifs con polimorfismo:
   
   	1- Crear una jerarquia polimorfica con una abstraccion para cada condicion de if(opcional, a veces ya existe).
   	2- Mover el cuerpo de cada if a cada abstraccion correspondiente.
   	3- Nombrar las abstracciones de 1)
   	4- Nombrar el mensaje de 2)
   	5- Reemplazar ifs por envio de mensaje polimorfico
   	6- Buscar objeto polimorfico(opcional, a veces ya existe).

   	aCallCostCalculator := CallCostCalculator for: aPhoneCall
   	aCallCostCalculator calculate: aPhonecall.

   	algol60
   	ml
   	lisp
   	simula
   	fortran


   	1) Favorecer uso de objetos inmutables 
   	2) Crear ojetos completos
   	3) Crear objetos validos
   	4) No usar nil
   		- Null Object
   		- Maybe/Optional
   		-----> remove:ifAbsent: // at:ifAbsent: // direccionIfNone: [ .... ] SOLO SIRVE EN LENGUAJES DINAMICAMENTE TIPADOS CON FULL CLOSURES.

   		direccionIfNone: aBlock
   		^direccion ifNil: aBlock	


   	5) No usar setters
   	6) Utilizar updates atomicos
   		unCLiente syncWith: anotherCliente
   	7) Modelar el conjunto de objetos	


   	^ aLlamada costo

   	tarifadorDeLLamada := tarifador para: aLlamada

   	para: aLlamada
   		self subclasses detect [:aTarifadorClass | aTarifadorClass esPara: aLlamada].
   		^ tarifadorClass newPara: aLlamada


Si redefinimos el igual tenemos que redefinir el hash.

EXCEPTIONS:

   Representan que se rompio un contrato, ante esto podemos hacer dos cosas:
      
      - Avisar: es necesario para hacer buen software avisar apenas se rompe un contrato, INMEDIATAMENTE(fail fast).
      - Hacernos los giles.


      Cosas a tener en cuenta:

         - Quien levanta la excepcion(o sea, quienes avisan que se rompio el contrato).
         - Quienes deben handlear las excepciones.
         - Que excepcion levanta si se rompe el contraro.
         - Como handlear la excepcion.



      Como handlear una excepcion:
       1) Devolver otro objeto como resultado del mensaje on:do:
       2) Pasar la excepcion hacia arriba(proximo handler)
       3) retry vuelve a intentar correr lo mismo
       4) resume: continua la ejecucion devolviendo como resultado lo que ponemos

     Que excepcion levanto?

      1) Crear una excp. por cada cond. de error
      2) Levantar siempre el mismo tipo de error a menos que tenga usar un handler particular. --> correcta, solo tiene sentido crear una excepcion si la puedo handlear


   Contratos en objetos:
   
      - precondiciones    --> implicitas siempre
      - post condiciones  --> asertamos en los tests
      - invariantes       --> asertamos en los tests



CLASE TEORICA POST 1 PARCIAL

Framework: solucion concreta, tiene codigo relacionado, son dependientes del lenguaje

3 tipos de frameworks:

   - generadores de codigo: horrible(no llegaron a nivel diseño a darse cuenta "como generar codigo"). Necesitaria generar un template donde despues luego se rellena, ese template podria ser modelado con una clase
   - caja blanca: intermedio.
      Cuando los utilizo tengo que subclasificar clases del framework. Cuando subclasificamos estamos rompiendo el encapsulamiento de la superclase.
      No es bueno porque cuando van saliendo nuevas versiones se rompe todo
   - caja negra: mejor
      Solo tengo que instanciar clases que el framework ya me provee(Hibernate)


Un framework contrala la ejecucion y manda mensajes a los objetos, en cambio un modulo/bibliote funciona al revez, lo uso yo mandando mensajes a el.

Idioms:
   Nunca poner asignacion de recursos dentro del try
   |fileStream|
   fileStream := FileStream named: 'pepe.txt'
   [ fileStream write: 'pepeee'. codigo . codigo. codigo ] ensure: [ fileStream close ]

   lo abstraemos con open: aFileStream during: aBlock

   y sacamos codigo repetido
   Esa abstraccion es un idiom.
   Sin closures no se puede implementar.
   No depende del dominio del problema de negocio.

Patrones de Diseño:

   Proveen una solucion abstracta y de diseño a problemas de la profecion.
   Libro Smalltalk best practices patterns.
   Todo patron tiene:
      - nombre 1
      - intencion 2
      - descripcion
      - estructura
      - ejemplo
      - implementacion
      - usos conocidos 3
      - patrones relacionados   

      Un patron de diseño no se crea, se descubre al haber aplicado de manera exitosa esa solucion en distintos contextos.
      Delegacion con subclasificacion: casi todos los patrones de diseño tienen la misma estructura de diseño/diagrama de clases.

      Casi todos tienen como uso conocido MVC(fue el primer framework de objetos, implementado en smalltalk para que el ser humano interactue con mouse y teclado con la pc)

      Decorator: agrega funcionalidad ORTOGONAL de manera dinamica a un objeto, "es una alternativa a la subclasificacion". Tiene que ser polimorficos con los objetos decorados en todo el protocolo.

      Dado un objeto se lo "decora" dinamicamente

      ConnectionDecorator es subclase de connection
      Y cada Decorator subclasifica ConnectionDecorator modificando los mensajes que son necesarios. El mensaje decorating le dice a quien decora.
      Cuando la cadena tiene un orden importante de como se debe crear hay otro patron, el Builder.
      Las variables de instancia nunca deberian ser privadas.
      El unico acoplamiento entre objetos en un lenguaje dinamicamente tipado son los mensajes que saben responder. En lenguajes estaticamente tipados es necesario preveer que clases van a ser decoradas. En los lenguajes prototipados no soluciona nada, el problema no existe.
      Smalltalk tiene el mensaje become, que lo que hace es swapear referencias.

      Adapter:

         Permite que se puedan comunicar dos objetos que no estan preparados para comunicarse("colaborar").
         Por ejemplo un traductor de idioma.
         El adapter conoce el objeto al que adapta
         No es polimorfico con el objeto al que adapta a diferencia del decorator. Lo que se adapta es un protocolo que uno de los objetos no sabe responder y el otro si.
         No tiene sentido hacer adapter de adapter de adapter.... se usa solo uno en el medio. NO agrega funcionalidad a diferencia de decorator, solo permite adaptar protocolos. Hay que crear un adaptador por cada clase que deseo adaptar, estaria bueno poder configurarlo para tener un adaptador universal. Esto no es posible pero si es posible. Esto es un pluggable adapter.
   


















